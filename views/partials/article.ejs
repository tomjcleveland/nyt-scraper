<% if (article.rank) { %>
  <div class="pill-box">
    <div class="pill">
      <strong><%= ordinal(article.rank) %></strong>-most viewed
    </div>
  </div>
<% } %>

<% const headlinesSorted = article.headlines.sort((a, b) => b.count - a.count); %>
<% const topHeadline = headlinesSorted[0]; %>
<p><%= topHeadline.abstract %> <a href="<%= article.url %>">Read full article</a></p>
<div class="headline-details">
  <p><em>Print headline: <%= article.printheadline || article.canonicalheadline %></em></p>
  <% if (headlinesSorted.length > 1) { %>
    <h4 style="margin: 0;">A/B tested headlines (incidence)</h4>
    <ol>
      <% headlinesSorted.forEach((headline, i) => { %>
        <li>
          <strong style="color: <%- COLORS.FULL[i % COLORS.FULL.length] %>;"><%= headline.headline %></strong> (<%= headline.pct %>%)
        </li>
      <% }) %>
    </ol>
  <% } %>
  <% if (article.timeSeries) { %>
    <h4 style="margin-top: 8px;">Incidence over time</h4>
    <% const chartId = `chart-${encodeURIComponent(article.canonicalheadline)}`; %>
    <div class="aspect aspect-16-9">
      <div class="aspect-contents" id="<%= chartId %>"></div>  
    </div>
    <script>
      (() => {
        const timeSeries = JSON.parse('<%- JSON.stringify(article.timeSeries); %>');
        const headlines = JSON.parse('<%- JSON.stringify(article.headlines.map((hi) => hi.headline)); %>');
        const hasHeadlines = headlines && headlines.length > 0 && !!headlines[0];
        const hasRanks = timeSeries.map(t => t.rank).filter(r => !!r).length !== 0;
        console.log('hasRanks', hasRanks)
        console.log(timeSeries.map(t => t.rank))

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);

        // Callback that creates and populates a data table,
        // instantiates the pie chart, passes in the data and
        // draws it.
        function drawChart() {

          // Create the data table.
          // Rows: Periods
          // Columns: [...Headlines, Rank]
          var data = new google.visualization.DataTable();
          const valuesByDate = {};
          for (const point of timeSeries) {
            let currValues = valuesByDate[point.minute];
            if (!currValues || currValues.length === 0) {
              currValues = [];
              if (hasHeadlines) {
                let arrLength = headlines.length;
                while (arrLength--) currValues.push(0);
              }
              if (hasRanks) {
                currValues.push(null);
              }
            }
            if (hasHeadlines) {
              currValues[headlines.indexOf(point.headline)] = Math.round(100 * (point.count / point.total));
            }
            if (hasRanks && point.rank) {
              currValues[hasHeadlines ? headlines.length : 0] = Number.isNaN(parseInt(point.rank, 10)) ? null : -1 * parseInt(point.rank, 10);
            }
            valuesByDate[point.minute] = currValues;
          }
          const rows = [];
          for (let key in valuesByDate) {
            const row = [new Date(key), ...valuesByDate[key]];
            rows.push(row);
          }
          let headings = ['Period'];
          if (hasHeadlines) {
            headings = headings.concat(headlines);
          }
          const arr = [headings, ...rows.sort((a, b) => a[0] - b[0])];
          if (hasRanks) {
            arr[0].push('Rank');
          }
          console.log(arr);
          var data = new google.visualization.arrayToDataTable(arr);

          var options = {
            width: '100%',
            legend: { position: "none" },
            colors: window.COLORS.FULL,
            vAxes: [],
            chartArea: {
              height: '80%'
            }
          };
          if (hasHeadlines) {
            options.vAxes.push({ format: "#'%'", title: 'Headline distribution' });
            options.isStacked = true;
            options.bar = {groupWidth: "100%"};
          }
          if (hasRanks) {
            let ticks = [];
            for (let i = 1; i <= 20; i++) {
              ticks.push({v: -1 * i, f: i.toString()});
            }
            options.vAxes.push({ ticks, title: 'Rank (by views)' });
            options.series = {
              [hasHeadlines ? headlines.length : 0]: {
                type: 'line',
                targetAxisIndex: hasHeadlines ? 1 : 0,
                pointSize: 5,
                color: '#000000'
              }
            }
          }

          
          let chart = new google.visualization.ColumnChart(document.getElementById('<%- chartId %>'));
          chart.draw(data, options);
        }
      })();
    </script>
  <% } %>
  <small><code><%= article.uri %></code></small>
</div>
<br>
