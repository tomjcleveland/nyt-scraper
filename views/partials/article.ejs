<% const headlinesSorted = article.headlines.sort((a, b) => b.count - a.count); %>
<% const topHeadline = headlinesSorted[0]; %>
<h3>
  <a href="<%= topHeadline.url %>">
    <%= topHeadline.headline %>
  </a>
</h3>
<p><%= topHeadline.abstract %></p>
<div class="headline-details">
  <p><em>Print headline: <%= article.printHeadline || article.canonicalHeadline %></em></p>
  <% if (headlinesSorted.length > 1) { %>
    <h4 style="margin: 0;">A/B tested headlines (incidence)</h4>
    <ol>
      <% headlinesSorted.forEach((headline, i) => { %>
        <li>
          <strong style="color: <%- COLORS.FULL[i % COLORS.FULL.length] %>;"><%= headline.headline %></strong> (<%= headline.pct %>%)
        </li>
      <% }) %>
    </ol>
  <% } %>
  <% if (article.timeSeries) { %>
    <h4 style="margin-top: 8px;">Incidence over time</h4>
    <% const chartId = `chart-${encodeURIComponent(article.canonicalHeadline)}`; %>
    <canvas id="<%= chartId %>" width="800" height="400"></canvas>
    <script>
      (() => {
        const timeSeries = JSON.parse('<%- JSON.stringify(article.timeSeries); %>');
        const headlines = JSON.parse('<%- JSON.stringify(article.headlines.map((hi) => hi.headline)); %>');
        const ctx = document.getElementById('<%= chartId %>').getContext('2d');
        const datasets = headlines.map((headline, i) => {
            return {
              label: headline,
              backgroundColor: window.COLORS.LIGHT[i % window.COLORS.LIGHT.length],
              data: timeSeries
                .filter((t) => t.headline === headline)
                .map(t => {
                  return {
                      x: new Date(t.minute),
                      y: Math.round(100 * (t.count / t.total)),
                    }
                })
            }
          });
        const myChart = new Chart(ctx, {
          type: 'line',
          data: {
            datasets,
          },
          options: {
            legend: {
              position: 'bottom',
              align: 'start',
              display: false
            },
            scales: {
              xAxes: [{
                type: 'time',
                time: {
                  unit: 'hour'
                },
              }],
              yAxes: [{
                ticks: {
                    suggestedMin: 0,
                    suggestedMax: 100,
                    callback: (v) => `${v}%`,
                }
              }]
            }
          }
        });
      })();
    </script>
  <% } %>
  <small><code><%= article.uri %></code></small>
</div>
<br>
